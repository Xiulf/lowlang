package test

#0:
export fn main "ll"(_0: i32, _1: &&u8) -> (_2: i32) {
    %0 {
        call #1<T=u8,A=4u8>(), %1
    }

    %1 {
        return
    }
}

#1:
fn test "ll"<type T, const A>() -> (_0: T) {
    %0 {
        _0 = A
        return
    }
}

#12000:
@lang
fn __insintric_gcd "ll"(_0: isize, _1: isize) -> (_2: isize) {
    _3: bool
    _4: isize

    %0 {
        _3 = eq _1 0isize
        switch _3 [0: %2, otherwise %1]
    }

    %1 {
        _2 = _0
        return
    }

    %2 {
        _4 = rem _0 _1
        call _2 = #12000(_1, _4), %3
    }

    %3 {
        return
    }
}

#12001:
@lang
fn __insintric_lcm "ll"(_0: isize, _1: isize) -> (_2: isize) {
    _3: isize
    _4: isize

    %0 {
        _3 = mul _0 _1
        call _4 = #12000(_0, _1), %1
    }

    %1 {
        _2 = div _3 _4
        return
    }
}
